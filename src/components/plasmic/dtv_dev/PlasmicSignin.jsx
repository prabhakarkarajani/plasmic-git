// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: PJgWtRccDtfX
import * as React from "react";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import TextInput from "../../TextInput"; // plasmic-import: NGI8y2GcvmiY/component
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: Humveg51WdE0/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicSignin.module.css"; // plasmic-import: PJgWtRccDtfX/css

createPlasmicElementProxy;

export const PlasmicSignin__VariantProps = new Array();

export const PlasmicSignin__ArgProps = new Array();

const $$ = {};

function PlasmicSignin__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdPassword_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"Enter Username"}
              value={
                generateStateValueProp($state, ["textInput", "value"]) ?? ""
              }
            />

            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.passwordInput),
                onChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["passwordInput", "value"],
                  AntdPassword_Helpers
                ),
                value: generateStateValueProp($state, [
                  "passwordInput",
                  "value"
                ])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "passwordInput.value"
                  }
                ],

                [],
                AntdPassword_Helpers ?? {},
                child$Props
              );
              return (
                <AntdPassword
                  data-plasmic-name={"passwordInput"}
                  data-plasmic-override={overrides.passwordInput}
                  {...child$Props}
                />
              );
            })()}
            <Button className={classNames("__wab_instance", sty.button__hbv12)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d4QeX
                )}
              >
                {"SignIn"}
              </div>
            </Button>
          </div>
          <AntdDropdown
            data-plasmic-name={"dropdown"}
            data-plasmic-override={overrides.dropdown}
            className={classNames("__wab_instance", sty.dropdown)}
            dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
            menuItems={() => (
              <React.Fragment>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__wJxo3)}
                  key={"menu-item-1"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vh4So
                    )}
                  >
                    {"Menu item"}
                  </div>
                </AntdMenuItem>
                <AntdMenuItem
                  className={classNames("__wab_instance", sty.menuItem__hxLd2)}
                  key={"menu-item-2"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2InC
                    )}
                  >
                    {"Menu item"}
                  </div>
                </AntdMenuItem>
              </React.Fragment>
            )}
            menuItemsJson={[
              { type: "item", value: "action1", label: "Action 1" },
              { type: "item", value: "action2", label: "Action 2" }
            ]}
          >
            <AntdButton
              className={classNames("__wab_instance", sty.button___34EC7)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___71Hzm
                )}
              >
                {"Dropdown"}
              </div>
            </AntdButton>
          </AntdDropdown>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "textInput", "passwordInput", "dropdown"],
  freeBox: ["freeBox", "textInput", "passwordInput"],
  textInput: ["textInput"],
  passwordInput: ["passwordInput"],
  dropdown: ["dropdown"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignin__ArgProps,
          internalVariantPropNames: PlasmicSignin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignin";
  } else {
    func.displayName = `PlasmicSignin.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"sMuK5QvKwWGrkw9DYJKXqS"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sMuK5QvKwWGrkw9DYJKXqS"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSignin = Object.assign(
  // Top-level PlasmicSignin renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    textInput: makeNodeComponent("textInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    dropdown: makeNodeComponent("dropdown"),
    // Metadata about props expected for PlasmicSignin
    internalVariantProps: PlasmicSignin__VariantProps,
    internalArgProps: PlasmicSignin__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignin;
/* prettier-ignore-end */
