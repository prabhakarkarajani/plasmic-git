// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: 8kXWecR7xP8z
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Drawer from "../../Drawer"; // plasmic-import: gRqSJu91s1nm/component
import Productbagitems from "../../Productbagitems"; // plasmic-import: XKs8X1cbiEqZ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicSkullnavbar.module.css"; // plasmic-import: 8kXWecR7xP8z/css
import group3992SvgTd6VpsBfMilw from "./images/group3992Svg.svg"; // plasmic-import: TD6VPSBfMilw/picture
import _8581237BagShoppingShopCartEcommerceIconpng410HaqSi0XVh from "./images/_8581237BagShoppingShopCartEcommerceIconpng.png"; // plasmic-import: 410HAQSi0xVh/picture

createPlasmicElementProxy;

export const PlasmicSkullnavbar__VariantProps = new Array();

export const PlasmicSkullnavbar__ArgProps = new Array();

const $$ = {};

function PlasmicSkullnavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <NavigationBar
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      brand={
        <a
          className={classNames(projectcss.all, projectcss.a, sty.link__kwHiF)}
          href={"#"}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___23EuI)}
            displayHeight={"40px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            src={{
              src: group3992SvgTd6VpsBfMilw,
              fullWidth: 300,
              fullHeight: 56,
              aspectRatio: 5.313658
            }}
          />
        </a>
      }
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      closeButton={
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__oviV4)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          src={"https://static1.plasmic.app/close.svg"}
        />
      }
      forceOpenMenu={false}
      itemsGap={8}
      menuItems={
        <React.Fragment>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__juq4T
            )}
            onClick={async event => {
              const $steps = {};
              $steps["goToEcommerceCart"] = true
                ? (() => {
                    const actionArgs = { destination: `/productpage` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        location.assign(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToEcommerceCart"] != null &&
                typeof $steps["goToEcommerceCart"] === "object" &&
                typeof $steps["goToEcommerceCart"].then === "function"
              ) {
                $steps["goToEcommerceCart"] = await $steps["goToEcommerceCart"];
              }
            }}
          >
            {"Headphones"}
          </a>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__i9DTt
            )}
            href={"/"}
          >
            {"Earbuds"}
          </a>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__dcgcQ
            )}
            href={"https://www.plasmic.app/"}
          >
            {"Speakers"}
          </a>
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__l0K4
            )}
            href={"/"}
          >
            {"Gaming"}
          </a>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___40ZoI)}
            displayHeight={"51px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"70px"}
            loading={"lazy"}
            onClick={async event => {
              const $steps = {};
              $steps["updateDrawerOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["drawer", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;
                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDrawerOpen"] != null &&
                typeof $steps["updateDrawerOpen"] === "object" &&
                typeof $steps["updateDrawerOpen"].then === "function"
              ) {
                $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
              }
            }}
            src={{
              src: _8581237BagShoppingShopCartEcommerceIconpng410HaqSi0XVh,
              fullWidth: 64,
              fullHeight: 64,
              aspectRatio: undefined
            }}
          />

          <Drawer
            data-plasmic-name={"drawer"}
            data-plasmic-override={overrides.drawer}
            className={classNames("__wab_instance", sty.drawer)}
            onOpenChange={generateStateOnChangeProp($state, ["drawer", "open"])}
            open={generateStateValueProp($state, ["drawer", "open"])}
            slot={
              <Productbagitems
                data-plasmic-name={"productbagitems"}
                data-plasmic-override={overrides.productbagitems}
                className={classNames("__wab_instance", sty.productbagitems)}
              />
            }
            trigger={null}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {" YOUR BAG"}
            </div>
          </Drawer>
        </React.Fragment>
      }
      openButton={
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___378NP)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          src={"https://static1.plasmic.app/menu.svg"}
        />
      }
      responsiveBreakpoint={768}
    />
  );
}

const PlasmicDescendants = {
  root: ["root", "drawer", "text", "productbagitems"],
  drawer: ["drawer", "text", "productbagitems"],
  text: ["text"],
  productbagitems: ["productbagitems"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSkullnavbar__ArgProps,
          internalVariantPropNames: PlasmicSkullnavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSkullnavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSkullnavbar";
  } else {
    func.displayName = `PlasmicSkullnavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicSkullnavbar = Object.assign(
  // Top-level PlasmicSkullnavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    drawer: makeNodeComponent("drawer"),
    text: makeNodeComponent("text"),
    productbagitems: makeNodeComponent("productbagitems"),
    // Metadata about props expected for PlasmicSkullnavbar
    internalVariantProps: PlasmicSkullnavbar__VariantProps,
    internalArgProps: PlasmicSkullnavbar__ArgProps
  }
);

export default PlasmicSkullnavbar;
/* prettier-ignore-end */
