// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: DmzRb63NDqeE
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: Humveg51WdE0/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { useScreenVariants as useScreenVariantscVfb4YQ8QuPw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CVfb4yQ8quPw/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicBBsportsFooter2.module.css"; // plasmic-import: DmzRb63NDqeE/css

createPlasmicElementProxy;

export const PlasmicBBsportsFooter2__VariantProps = new Array();

export const PlasmicBBsportsFooter2__ArgProps = new Array();

const $$ = {};

function PlasmicBBsportsFooter2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscVfb4YQ8QuPw()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Button
        className={classNames("__wab_instance", sty.button__o00F6)}
        link={`/new-page`}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lfVwh
          )}
        >
          {"CONTINUE TO CANCLE THE SUBSCRITION"}
        </div>
      </Button>
      <DataFetcher
        data-plasmic-name={"httpRestApiFetcher"}
        data-plasmic-override={overrides.httpRestApiFetcher}
        body={{
          GetProductsListRequestMessage: {
            apiUser: "popsical@yopmail.com",
            apiPassword: "Password1@",
            channelPartnerID: "POPSICAL",
            prodAreaCode: "001",
            returnAttributes: "T",
            returnAppChannels: "T"
          }
        }}
        className={classNames("__wab_instance", sty.httpRestApiFetcher)}
        dataName={"fetchedData"}
        errorDisplay={
          <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
        }
        errorName={"fetchError"}
        headers={{
          "Content-Type": "application/json",
          Accept: "application/json"
        }}
        loadingDisplay={
          <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
        }
        method={"POST"}
        noLayout={false}
        url={"https://rest-dev.evergent.com/ccb/getProductsList"}
      >
        <DataCtxReader__>
          {$ctx =>
            (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return [1];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Button
                  className={classNames("__wab_instance", sty.button__yKxGm)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};
                    $steps["goToBBsubscriptionUpgrade"] =
                      $ctx.fetchedData.GetProductsListResponseMessage
                        .responseCode == 1
                        ? (() => {
                            const actionArgs = { destination: `/new-page-2` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToBBsubscriptionUpgrade"] != null &&
                      typeof $steps["goToBBsubscriptionUpgrade"] === "object" &&
                      typeof $steps["goToBBsubscriptionUpgrade"].then ===
                        "function"
                    ) {
                      $steps["goToBBsubscriptionUpgrade"] = await $steps[
                        "goToBBsubscriptionUpgrade"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uua2C
                    )}
                  >
                    {"NEVER MIND,I 'D LIKE TO STAY SUBSCRIBED"}
                  </div>
                </Button>
              );
            })
          }
        </DataCtxReader__>
      </DataFetcher>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "httpRestApiFetcher"],
  httpRestApiFetcher: ["httpRestApiFetcher"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBBsportsFooter2__ArgProps,
          internalVariantPropNames: PlasmicBBsportsFooter2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBBsportsFooter2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBBsportsFooter2";
  } else {
    func.displayName = `PlasmicBBsportsFooter2.${nodeName}`;
  }
  return func;
}

export const PlasmicBBsportsFooter2 = Object.assign(
  // Top-level PlasmicBBsportsFooter2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    // Metadata about props expected for PlasmicBBsportsFooter2
    internalVariantProps: PlasmicBBsportsFooter2__VariantProps,
    internalArgProps: PlasmicBBsportsFooter2__ArgProps
  }
);

export default PlasmicBBsportsFooter2;
/* prettier-ignore-end */
