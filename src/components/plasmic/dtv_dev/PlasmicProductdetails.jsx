// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: nsweVcsOwu0x
import * as React from "react";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import Button from "../../Button"; // plasmic-import: Humveg51WdE0/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicProductdetails.module.css"; // plasmic-import: nsweVcsOwu0x/css
import _8581237BagShoppingShopCartEcommerceIconpng410HaqSi0XVh from "./images/_8581237BagShoppingShopCartEcommerceIconpng.png"; // plasmic-import: 410HAQSi0xVh/picture
import image4I6QdafH0Z2H from "./images/image4.png"; // plasmic-import: i6-QdafH0z2H/picture

createPlasmicElementProxy;

export const PlasmicProductdetails__VariantProps = new Array();

export const PlasmicProductdetails__ArgProps = new Array();

const $$ = {};

function PlasmicProductdetails__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    productData: usePlasmicDataOp(() => {
      return {
        sourceId: "oAqXJAkB6tioCBekFn2cJk",
        opId: "ebf3bd38-ce70-49ce-9093-e15da9e5fcb7",
        userArgs: {},
        cacheKey: `plasmic.$.${(() => {
          try {
            return undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.ebf3bd38-ce70-49ce-9093-e15da9e5fcb7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"productDetails"}
          data-plasmic-override={overrides.productDetails}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.productDetails
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__gdHxs)}>
            <div className={classNames(projectcss.all, sty.freeBox__ojJK)}>
              <div className={classNames(projectcss.all, sty.freeBox__we8K7)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__phMwy)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={
                    "https://www.skullcandy.com/cdn/shop/files/skdylogosvg.svg?v=1710432982&width=150"
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__jtfVr)}>
                <div className={classNames(projectcss.all, sty.columns__nHZxX)}>
                  <div
                    className={classNames(projectcss.all, sty.column__poCXh)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__veFnv
                      )}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToEcommerceCart"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/productpage`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToEcommerceCart"] != null &&
                          typeof $steps["goToEcommerceCart"] === "object" &&
                          typeof $steps["goToEcommerceCart"].then === "function"
                        ) {
                          $steps["goToEcommerceCart"] = await $steps[
                            "goToEcommerceCart"
                          ];
                        }
                      }}
                    >
                      {"Headphones"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__jzbk4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cLnpC
                      )}
                    >
                      {"Earbuds"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__gejDy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2MWhz
                      )}
                    >
                      {"Gaming"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__xSz8I)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nQyny
                      )}
                    >
                      {"Explore"}
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__qi7Ff)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__dxJp)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"64px"}
                  loading={"lazy"}
                  src={{
                    src: _8581237BagShoppingShopCartEcommerceIconpng410HaqSi0XVh,
                    fullWidth: 64,
                    fullHeight: 64,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___1J2RO)}>
            <div className={classNames(projectcss.all, sty.columns__qSleP)}>
              <div className={classNames(projectcss.all, sty.column__isTVs)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__dJqyi)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={
                    "https://www.skullcandy.com/cdn/shop/files/BuyBox_EcoBuds_1.png?v=1708731952&width=990"
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.column___5R5Da)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___35L8X
                  )}
                >
                  {"Sustainable True Wireless Earbuds"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y66X3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.params.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "SKULLCANDY ECOBUDS\u2122";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3WIG
                  )}
                >
                  {"$39.99"}
                </div>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kkDY
                    )}
                  >
                    {"ADD TO CART"}
                  </div>
                </Button>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xPirc)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: image4I6QdafH0Z2H,
                    fullWidth: 456,
                    fullHeight: 557,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  productDetails: ["productDetails", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductdetails__ArgProps,
          internalVariantPropNames: PlasmicProductdetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductdetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "productDetails") {
    func.displayName = "PlasmicProductdetails";
  } else {
    func.displayName = `PlasmicProductdetails.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"sMuK5QvKwWGrkw9DYJKXqS"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sMuK5QvKwWGrkw9DYJKXqS"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicProductdetails = Object.assign(
  // Top-level PlasmicProductdetails renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("productDetails"))),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicProductdetails
    internalVariantProps: PlasmicProductdetails__VariantProps,
    internalArgProps: PlasmicProductdetails__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProductdetails;
/* prettier-ignore-end */
