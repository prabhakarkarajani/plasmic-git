// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: Xpzsb6OiU32Q
import * as React from "react";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useCurrentUser
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import Cartdrawer from "../../Cartdrawer"; // plasmic-import: c5HiDm6LGjFo/component
import Button from "../../Button"; // plasmic-import: Humveg51WdE0/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Card from "../../Card"; // plasmic-import: Hs8TCF6h8IMi/component
import SkullcandyFooter from "../../SkullcandyFooter"; // plasmic-import: vsk85xXTIg3V/component
import { useScreenVariants as useScreenVariantscVfb4YQ8QuPw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CVfb4yQ8quPw/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicProducts.module.css"; // plasmic-import: Xpzsb6OiU32Q/css
import desktopPlpHeadphonesCrusherBassjpegFoN6R23OhYm from "./images/desktopPlpHeadphonesCrusherBassjpeg.jpg"; // plasmic-import: foN6r23-ohYm/picture
import desktopPlpHeadphonesLimitedEdition13429E2756E3349Ff91A3D1B0A8Db35A4JpegLC4RF1QxGnd4 from "./images/desktopPlpHeadphonesLimitedEdition13429E2756E3349Ff91A3D1B0A8Db35A4Jpeg.jpg"; // plasmic-import: lC4rF1qxGND4/picture
import headphonesHeaderColumnNewArrivalNoraTtCrusherjpegG55NJvMt9Oix from "./images/headphonesHeaderColumnNewArrivalNoraTtCrusherjpeg.jpg"; // plasmic-import: g55nJVMt9Oix/picture
import headphonesHeaderColumnNoiseCancelingMiaBrooksjpegJlabhdHlNHy from "./images/headphonesHeaderColumnNoiseCancelingMiaBrooksjpeg.jpg"; // plasmic-import: JlabhdHlN_hy/picture

createPlasmicElementProxy;

export const PlasmicProducts__VariantProps = new Array();

export const PlasmicProducts__ArgProps = new Array();

const $$ = {};

function PlasmicProducts__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscVfb4YQ8QuPw()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"products"}
          data-plasmic-override={overrides.products}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.products
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__huYY)}>
            <div className={classNames(projectcss.all, sty.freeBox__gfgQd)}>
              <div className={classNames(projectcss.all, sty.freeBox__c506L)}>
                <div className={classNames(projectcss.all, sty.freeBox__rnveF)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__y4Q5U)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToEcommerceCart"] = true
                        ? (() => {
                            const actionArgs = { destination: `/productpage` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToEcommerceCart"] != null &&
                        typeof $steps["goToEcommerceCart"] === "object" &&
                        typeof $steps["goToEcommerceCart"].then === "function"
                      ) {
                        $steps["goToEcommerceCart"] = await $steps[
                          "goToEcommerceCart"
                        ];
                      }
                    }}
                    src={
                      "https://www.skullcandy.com/cdn/shop/files/skdylogosvg.svg?v=1710432982&width=150"
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ctNcS)}>
                  <div
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__kXmP)}
                    >
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__qmUub
                        )}
                        href={`/productpage`}
                      >
                        {"Headphones"}
                      </a>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__l42G8)}
                    >
                      <a
                        data-plasmic-name={"earbuds"}
                        data-plasmic-override={overrides.earbuds}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.earbuds
                        )}
                        href={`/products`}
                      >
                        {"Earbuds"}
                      </a>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__rZkNr)}
                    >
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__bWpgq
                        )}
                        href={`/products`}
                      >
                        {"Gaming"}
                      </a>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__fmEQ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jAaaq
                        )}
                      >
                        {"Explore"}
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__nH7Ci)}>
                  <Cartdrawer
                    data-plasmic-name={"cartdrawer"}
                    data-plasmic-override={overrides.cartdrawer}
                    className={classNames("__wab_instance", sty.cartdrawer)}
                  />
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__gkVsj)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___7DHGd)}
                displayHeight={"100%"}
                displayMaxHeight={"262px"}
                displayMaxWidth={"350px"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: desktopPlpHeadphonesCrusherBassjpegFoN6R23OhYm,
                  fullWidth: 341,
                  fullHeight: 257,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ndH76)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: desktopPlpHeadphonesLimitedEdition13429E2756E3349Ff91A3D1B0A8Db35A4JpegLC4RF1QxGnd4,
                  fullWidth: 341,
                  fullHeight: 257,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ktLcW)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: headphonesHeaderColumnNewArrivalNoraTtCrusherjpegG55NJvMt9Oix,
                  fullWidth: 341,
                  fullHeight: 257,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__qXs1F)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: headphonesHeaderColumnNoiseCancelingMiaBrooksjpegJlabhdHlNHy,
                  fullWidth: 341,
                  fullHeight: 257,
                  aspectRatio: undefined
                }}
              />
            </div>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"HEADPHONES"}
            </h1>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__v5Xwo)}>
            <Button className={classNames("__wab_instance", sty.button__edYf)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bxiTk
                )}
              >
                {"Filters"}
              </div>
            </Button>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__i8JGa
              )}
              href={"https://www.plasmic.app/"}
            >
              {"On Ear"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__lqbb
              )}
              href={"https://www.plasmic.app/"}
            >
              {"Over Ear"}
            </a>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__fUkNn
              )}
              href={"https://www.plasmic.app/"}
            >
              {"Some link text"}
            </a>
            <AntdDropdown
              data-plasmic-name={"dropdown"}
              data-plasmic-override={overrides.dropdown}
              className={classNames("__wab_instance", sty.dropdown)}
              dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
              menuItems={() => (
                <React.Fragment>
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__ozyc4
                    )}
                    key={"menu-item-1"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tZtAf
                      )}
                    >
                      {"Menu item"}
                    </div>
                  </AntdMenuItem>
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__rdl7V
                    )}
                    key={"menu-item-2"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nGdHm
                      )}
                    >
                      {"Menu item"}
                    </div>
                  </AntdMenuItem>
                </React.Fragment>
              )}
              menuItemsJson={[
                { type: "item", value: "action1", label: "Action 1" },
                { type: "item", value: "action2", label: "Action 2" }
              ]}
            >
              <AntdButton
                className={classNames("__wab_instance", sty.button__vuR5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mrJ8T
                  )}
                >
                  {"Sort By: Featured"}
                </div>
              </AntdButton>
            </AntdDropdown>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__hu1N7)}>
            <DataFetcher
              data-plasmic-name={"httpRestApiFetcher"}
              data-plasmic-override={overrides.httpRestApiFetcher}
              className={classNames("__wab_instance", sty.httpRestApiFetcher)}
              dataName={"fetchedData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => "Error fetching data"}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              headers={{
                "Content-Type": "application/json",
                Accept: "application/json"
              }}
              loadingDisplay={
                <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
              }
              method={"GET"}
              noLayout={false}
              url={"https://shoppingcart-n5cf.onrender.com/products"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ykRy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5L2Hi
                      )}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.fetchedData;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sfgnA
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wI3Qv
                              )}
                            >
                              <Card
                                data-plasmic-name={"card"}
                                data-plasmic-override={overrides.card}
                                className={classNames(
                                  "__wab_instance",
                                  sty.card
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xj4
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__xOdf)}
                                    displayHeight={"273px"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"273px"}
                                    height={"100%"}
                                    loading={"lazy"}
                                    src={(() => {
                                      try {
                                        return currentItem.image;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "https://www.skullcandy.com/cdn/shop/files/crusher_evo_buy_box_true_black_1_400x.png?v=1709673991";
                                        }
                                        throw e;
                                      }
                                    })()}
                                    width={"100%"}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jQtUc
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Crusher\u00ae Evo";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__r23R
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.description;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Sensory Bass Headphones with Personal Sound";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wzlWv
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return `$` + currentItem.price;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "$169.99";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button___8JwLr
                                  )}
                                  onClick={async event => {
                                    const $steps = {};
                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return (() => {
                                                return fetch(
                                                  "https://shoppingcart-n5cf.onrender.com/cart",
                                                  {
                                                    method: "POST",
                                                    headers: {
                                                      "Content-Type":
                                                        "application/json"
                                                    },
                                                    body: JSON.stringify({
                                                      productId: currentItem.id,
                                                      quantity: 1
                                                    })
                                                  }
                                                );
                                              })();
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__pe2QU
                                    )}
                                  >
                                    {"Add to Cart"}
                                  </div>
                                </Button>
                              </Card>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            </DataFetcher>
          </div>
          <SkullcandyFooter
            data-plasmic-name={"skullcandyFooter"}
            data-plasmic-override={overrides.skullcandyFooter}
            className={classNames("__wab_instance", sty.skullcandyFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  products: [
    "products",
    "columns",
    "earbuds",
    "cartdrawer",
    "h1",
    "dropdown",
    "httpRestApiFetcher",
    "card",
    "skullcandyFooter"
  ],

  columns: ["columns", "earbuds"],
  earbuds: ["earbuds"],
  cartdrawer: ["cartdrawer"],
  h1: ["h1"],
  dropdown: ["dropdown"],
  httpRestApiFetcher: ["httpRestApiFetcher", "card"],
  card: ["card"],
  skullcandyFooter: ["skullcandyFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProducts__ArgProps,
          internalVariantPropNames: PlasmicProducts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProducts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "products") {
    func.displayName = "PlasmicProducts";
  } else {
    func.displayName = `PlasmicProducts.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"sMuK5QvKwWGrkw9DYJKXqS"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sMuK5QvKwWGrkw9DYJKXqS"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicProducts = Object.assign(
  // Top-level PlasmicProducts renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("products"))),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    earbuds: makeNodeComponent("earbuds"),
    cartdrawer: makeNodeComponent("cartdrawer"),
    h1: makeNodeComponent("h1"),
    dropdown: makeNodeComponent("dropdown"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    card: makeNodeComponent("card"),
    skullcandyFooter: makeNodeComponent("skullcandyFooter"),
    // Metadata about props expected for PlasmicProducts
    internalVariantProps: PlasmicProducts__VariantProps,
    internalArgProps: PlasmicProducts__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProducts;
/* prettier-ignore-end */
