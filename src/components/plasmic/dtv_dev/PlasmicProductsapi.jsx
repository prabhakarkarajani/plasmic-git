// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: Rs2G9aLuydaK
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicProductsapi.module.css"; // plasmic-import: Rs2G9aLuydaK/css
import headphoneswebp0WV1EBgFi7B from "./images/headphoneswebp.webp"; // plasmic-import: 0wV1eBGFi7b_/picture

createPlasmicElementProxy;

export const PlasmicProductsapi__VariantProps = new Array();

export const PlasmicProductsapi__ArgProps = new Array("children");

const $$ = {};

function PlasmicProductsapi__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <DataFetcher
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      dataName={"fetchedData"}
      errorDisplay={
        <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
      }
      errorName={"fetchError"}
      headers={{
        "Content-Type": "application/json",
        Accept: "application/json"
      }}
      loadingDisplay={<DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>}
      method={"GET"}
      noLayout={false}
      url={"http://localhost:3000/products"}
    >
      <DataCtxReader__>
        {$ctx =>
          (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $ctx.fetchedData[1];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__kX8Q9)}
                key={currentIndex}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $ctx.fetchedData.slice(0, 3);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                  const currentItem = __plasmic_item_1;
                  const currentIndex = __plasmic_idx_1;
                  return (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column___93KW3)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zaw8G
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ietEa
                          )}
                        >
                          <PlasmicImg__
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"300px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"225px"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return currentItem.image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return {
                                    src: headphoneswebp0WV1EBgFi7B,
                                    fullWidth: 400,
                                    fullHeight: 400,
                                    aspectRatio: undefined
                                  };
                                }
                                throw e;
                              }
                            })()}
                            width={``}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__rgAcM
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__baK
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kpy1
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.name;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column___8W6Ih
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lEgG
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return `$ ${currentItem.price}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iWQbr
                          )}
                        >
                          {renderPlasmicSlot({
                            defaultContents: "ON SALE",
                            value: args.children,
                            className: classNames(sty.slotTargetChildren)
                          })}
                        </div>
                      </div>
                    </Stack__>
                  );
                })}
              </Stack__>
            );
          })
        }
      </DataCtxReader__>
    </DataFetcher>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductsapi__ArgProps,
          internalVariantPropNames: PlasmicProductsapi__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductsapi__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductsapi";
  } else {
    func.displayName = `PlasmicProductsapi.${nodeName}`;
  }
  return func;
}

export const PlasmicProductsapi = Object.assign(
  // Top-level PlasmicProductsapi renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicProductsapi
    internalVariantProps: PlasmicProductsapi__VariantProps,
    internalArgProps: PlasmicProductsapi__ArgProps
  }
);

export default PlasmicProductsapi;
/* prettier-ignore-end */
