// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: DmT0Nv4lo2K2
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Button from "../../Button"; // plasmic-import: Humveg51WdE0/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicCartComponent3.module.css"; // plasmic-import: DmT0Nv4lo2K2/css

createPlasmicElementProxy;

export const PlasmicCartComponent3__VariantProps = new Array();

export const PlasmicCartComponent3__ArgProps = new Array("cart", "cartElement");

const $$ = {};

function PlasmicCartComponent3__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          cart: false,
          cartElement: 0
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hAnke
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return "Total Items In the Cart Are : " + $props.cartElement;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Cart Details";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <a
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          href={undefined}
          target={undefined}
        >
          <AntdPopover
            data-plasmic-name={"popover"}
            data-plasmic-override={overrides.popover}
            arrow={true}
            className={classNames("__wab_instance", sty.popover)}
            content={null}
            contentText={(() => {
              try {
                return "Cart Details Are : " + $props.cartElement;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens
            )}
            mouseEnterDelay={0}
            mouseLeaveDelay={0}
            onOpenChange={generateStateOnChangeProp($state, [
              "popover",
              "open"
            ])}
            open={generateStateValueProp($state, ["popover", "open"])}
            popoverScopeClassName={sty["popover__popover"]}
            title={null}
          >
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              onClick={async event => {
                const $steps = {};
              }}
            >
              {"view Cart"}
            </Button>
          </AntdPopover>
        </a>
      </div>
      {(() => {
        try {
          return $props.cart;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__j1YVj
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return "Cart Details Are : " + $props.cartElement;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      ) : null}
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "link", "popover", "button"],
  freeBox: ["freeBox", "link", "popover", "button"],
  link: ["link", "popover", "button"],
  popover: ["popover", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCartComponent3__ArgProps,
          internalVariantPropNames: PlasmicCartComponent3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCartComponent3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCartComponent3";
  } else {
    func.displayName = `PlasmicCartComponent3.${nodeName}`;
  }
  return func;
}

export const PlasmicCartComponent3 = Object.assign(
  // Top-level PlasmicCartComponent3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),
    popover: makeNodeComponent("popover"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicCartComponent3
    internalVariantProps: PlasmicCartComponent3__VariantProps,
    internalArgProps: PlasmicCartComponent3__ArgProps
  }
);

export default PlasmicCartComponent3;
/* prettier-ignore-end */
