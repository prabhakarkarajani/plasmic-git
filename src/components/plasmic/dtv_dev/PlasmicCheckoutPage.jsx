// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: 7L-SvLePx543
import * as React from "react";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  PlasmicPageGuard as PlasmicPageGuard__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import Skullnavbar from "../../Skullnavbar"; // plasmic-import: 8kXWecR7xP8z/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import TextInput from "../../TextInput"; // plasmic-import: NGI8y2GcvmiY/component
import Checkbox from "../../Checkbox"; // plasmic-import: cqE4tnpYrz_3/component
import Button from "../../Button"; // plasmic-import: Humveg51WdE0/component
import Productbagitems from "../../Productbagitems"; // plasmic-import: XKs8X1cbiEqZ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicCheckoutPage.module.css"; // plasmic-import: 7L-SvLePx543/css
import shopPaypngFiDDthMvyXMn from "./images/shopPaypng.png"; // plasmic-import: fiDDthMvyXMn/picture
import paypalpngTZlmNm5XswOr from "./images/paypalpng.png"; // plasmic-import: TZlmNm5XswOr/picture
import gpay1Png6RdiFthnlxSj from "./images/gpay1Png.png"; // plasmic-import: 6RdiFthnlxSj/picture

createPlasmicElementProxy;

export const PlasmicCheckoutPage__VariantProps = new Array();

export const PlasmicCheckoutPage__ArgProps = new Array();

const $$ = {};

function PlasmicCheckoutPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__aJhr1)}>
            <Skullnavbar
              data-plasmic-name={"skullnavbar"}
              data-plasmic-override={overrides.skullnavbar}
              className={classNames("__wab_instance", sty.skullnavbar)}
            />

            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__tRcyP)}>
                <div className={classNames(projectcss.all, sty.freeBox__jo4Lb)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ow9Qb)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__qhjjm)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"84px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: shopPaypngFiDDthMvyXMn,
                        fullWidth: 300,
                        fullHeight: 71,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ggCj4)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"84px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: paypalpngTZlmNm5XswOr,
                        fullWidth: 421,
                        fullHeight: 120,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__kcVzf)}
                      displayHeight={"20px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"84px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: gpay1Png6RdiFthnlxSj,
                        fullWidth: 640,
                        fullHeight: 360,
                        aspectRatio: undefined
                      }}
                    />
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__doFiv
                    )}
                  >
                    {"or pay with credit card"}
                  </div>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__ktzEu
                    )}
                  >
                    {"Delivery"}
                  </h1>
                  <AntdDropdown
                    className={classNames(
                      "__wab_instance",
                      sty.dropdown__yl0Ex
                    )}
                    dropdownMenuScopeClassName={
                      sty["dropdown__yl0Ex__dropdownMenu"]
                    }
                    menuClassName={classNames({
                      [sty["pcls_hrXIxswGN2Bx"]]: true
                    })}
                    menuItemClassName={classNames({
                      [sty["pcls_1gPIRivsRkve"]]: true
                    })}
                    menuItems={() => (
                      <React.Fragment>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem___9I9Cq
                          )}
                          key={"menu-item-1"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kaZkN
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                        <AntdMenuItem
                          className={classNames(
                            "__wab_instance",
                            sty.menuItem__usfhd
                          )}
                          key={"menu-item-2"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1Vern
                            )}
                          >
                            {"Menu item"}
                          </div>
                        </AntdMenuItem>
                      </React.Fragment>
                    )}
                    menuItemsJson={(() => {
                      const __composite = [
                        {
                          type: "item",
                          value: "action1",
                          label: null,
                          onClick: null
                        },
                        { type: "item", value: "action2", label: "Action 2" }
                      ];

                      __composite["0"]["label"] = "united states";
                      __composite["0"]["onClick"] = async info => {
                        const $steps = {};
                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = { operation: 0, value: true };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }
                      };
                      return __composite;
                    })()}
                  >
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__t7XFk
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___92A6T
                        )}
                      >
                        {"Dropdown"}
                      </div>
                    </AntdButton>
                  </AntdDropdown>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__heJeK)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"First name"}
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <TextInput
                      data-plasmic-name={"textInput2"}
                      data-plasmic-override={overrides.textInput2}
                      className={classNames("__wab_instance", sty.textInput2)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"Last name"}
                      value={
                        generateStateValueProp($state, [
                          "textInput2",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput3"}
                    data-plasmic-override={overrides.textInput3}
                    className={classNames("__wab_instance", sty.textInput3)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput3",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Address"}
                    value={
                      generateStateValueProp($state, ["textInput3", "value"]) ??
                      ""
                    }
                  />

                  <a
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link
                    )}
                    href={"https://www.plasmic.app/"}
                  >
                    {"+ Add apartment, suite, etc."}
                  </a>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pb6Tt)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput4"}
                      data-plasmic-override={overrides.textInput4}
                      className={classNames("__wab_instance", sty.textInput4)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput4",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"City"}
                      value={
                        generateStateValueProp($state, [
                          "textInput4",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <AntdDropdown
                      className={classNames(
                        "__wab_instance",
                        sty.dropdown__w1Chv
                      )}
                      dropdownMenuScopeClassName={
                        sty["dropdown__w1Chv__dropdownMenu"]
                      }
                      fakeOpen={false}
                      menuItems={() => (
                        <React.Fragment>
                          <AntdMenuItem
                            className={classNames(
                              "__wab_instance",
                              sty.menuItem__pprSx
                            )}
                            key={"menu-item-1"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nIyxG
                              )}
                            >
                              {"Menu item"}
                            </div>
                          </AntdMenuItem>
                          <AntdMenuItem
                            className={classNames(
                              "__wab_instance",
                              sty.menuItem__hS4Xi
                            )}
                            key={"menu-item-2"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8ZnFn
                              )}
                            >
                              {"Menu item"}
                            </div>
                          </AntdMenuItem>
                        </React.Fragment>
                      )}
                      menuItemsJson={[
                        { type: "item", value: "action1", label: "Action 1" },
                        { type: "item", value: "action2", label: "Action 2" }
                      ]}
                      onAction={async key => {
                        const $steps = {};
                        $steps["updateTextInputValue"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["textInput", "value"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTextInputValue"] != null &&
                          typeof $steps["updateTextInputValue"] === "object" &&
                          typeof $steps["updateTextInputValue"].then ===
                            "function"
                        ) {
                          $steps["updateTextInputValue"] = await $steps[
                            "updateTextInputValue"
                          ];
                        }
                        $steps["updateTextInputValue2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["textInput", "value"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTextInputValue2"] != null &&
                          typeof $steps["updateTextInputValue2"] === "object" &&
                          typeof $steps["updateTextInputValue2"].then ===
                            "function"
                        ) {
                          $steps["updateTextInputValue2"] = await $steps[
                            "updateTextInputValue2"
                          ];
                        }
                      }}
                      trigger={"click"}
                      useMenuItemsSlot={false}
                    >
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__qdOSa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zhA6H
                          )}
                        >
                          {"Dropdown"}
                        </div>
                      </AntdButton>
                    </AntdDropdown>
                    <TextInput
                      data-plasmic-name={"textInput6"}
                      data-plasmic-override={overrides.textInput6}
                      className={classNames("__wab_instance", sty.textInput6)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput6",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      value={
                        generateStateValueProp($state, [
                          "textInput6",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput5"}
                    data-plasmic-override={overrides.textInput5}
                    className={classNames("__wab_instance", sty.textInput5)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput5",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Phone"}
                    value={
                      generateStateValueProp($state, ["textInput5", "value"]) ??
                      ""
                    }
                  />

                  <Checkbox
                    data-plasmic-name={"checkbox"}
                    data-plasmic-override={overrides.checkbox}
                    className={classNames("__wab_instance", sty.checkbox)}
                    isChecked={
                      generateStateValueProp($state, [
                        "checkbox",
                        "isChecked"
                      ]) ?? false
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "checkbox",
                        "isChecked"
                      ])(eventArgs[0]);
                    }}
                  >
                    {"Text me with news and offers"}
                  </Checkbox>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__ld7Ri
                    )}
                  >
                    {"Shipping method"}
                  </h1>
                  <TextInput
                    data-plasmic-name={"textInput7"}
                    data-plasmic-override={overrides.textInput7}
                    className={classNames("__wab_instance", sty.textInput7)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput7",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={
                      "Enter your shipping address to view available shipping methods."
                    }
                    value={
                      generateStateValueProp($state, ["textInput7", "value"]) ??
                      ""
                    }
                  />

                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__p3GIg
                    )}
                  >
                    {"Payment"}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qjehs
                    )}
                  >
                    {"All transactions are secure and encrypted."}
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput8"}
                    data-plasmic-override={overrides.textInput8}
                    className={classNames("__wab_instance", sty.textInput8)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput8",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Card Number"}
                    value={
                      generateStateValueProp($state, ["textInput8", "value"]) ??
                      ""
                    }
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__wEhMh)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput9"}
                      data-plasmic-override={overrides.textInput9}
                      className={classNames("__wab_instance", sty.textInput9)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput9",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"Expiry Date"}
                      value={
                        generateStateValueProp($state, [
                          "textInput9",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <TextInput
                      data-plasmic-name={"textInput10"}
                      data-plasmic-override={overrides.textInput10}
                      className={classNames("__wab_instance", sty.textInput10)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput10",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"CVV"}
                      value={
                        generateStateValueProp($state, [
                          "textInput10",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput11"}
                    data-plasmic-override={overrides.textInput11}
                    className={classNames("__wab_instance", sty.textInput11)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput11",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Name on Card"}
                    value={
                      generateStateValueProp($state, [
                        "textInput11",
                        "value"
                      ]) ?? ""
                    }
                  />

                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1___5Xwdw
                    )}
                  >
                    {"Remember me"}
                  </h1>
                  <Checkbox
                    data-plasmic-name={"checkbox2"}
                    data-plasmic-override={overrides.checkbox2}
                    className={classNames("__wab_instance", sty.checkbox2)}
                    isChecked={
                      generateStateValueProp($state, [
                        "checkbox2",
                        "isChecked"
                      ]) ?? false
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "checkbox2",
                        "isChecked"
                      ])(eventArgs[0]);
                    }}
                  >
                    {"   Save my information for a faster checkout"}
                  </Checkbox>
                  <Button
                    className={classNames("__wab_instance", sty.button__nxDAg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7V8HG
                      )}
                    >
                      {"Pay now"}
                    </div>
                  </Button>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__wegE3)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uIPa4)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__zeaO5
                    )}
                  >
                    {"Bag Items"}
                  </h1>
                  <Productbagitems
                    data-plasmic-name={"productbagitems"}
                    data-plasmic-override={overrides.productbagitems}
                    className={classNames(
                      "__wab_instance",
                      sty.productbagitems
                    )}
                  />
                </Stack__>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "skullnavbar",
    "columns",
    "textInput",
    "textInput2",
    "textInput3",
    "link",
    "textInput4",
    "textInput6",
    "textInput5",
    "checkbox",
    "textInput7",
    "textInput8",
    "textInput9",
    "textInput10",
    "textInput11",
    "checkbox2",
    "productbagitems"
  ],

  skullnavbar: ["skullnavbar"],
  columns: [
    "columns",
    "textInput",
    "textInput2",
    "textInput3",
    "link",
    "textInput4",
    "textInput6",
    "textInput5",
    "checkbox",
    "textInput7",
    "textInput8",
    "textInput9",
    "textInput10",
    "textInput11",
    "checkbox2",
    "productbagitems"
  ],

  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  link: ["link"],
  textInput4: ["textInput4"],
  textInput6: ["textInput6"],
  textInput5: ["textInput5"],
  checkbox: ["checkbox"],
  textInput7: ["textInput7"],
  textInput8: ["textInput8"],
  textInput9: ["textInput9"],
  textInput10: ["textInput10"],
  textInput11: ["textInput11"],
  checkbox2: ["checkbox2"],
  productbagitems: ["productbagitems"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCheckoutPage__ArgProps,
          internalVariantPropNames: PlasmicCheckoutPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCheckoutPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckoutPage";
  } else {
    func.displayName = `PlasmicCheckoutPage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"sMuK5QvKwWGrkw9DYJKXqS"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sMuK5QvKwWGrkw9DYJKXqS"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicCheckoutPage = Object.assign(
  // Top-level PlasmicCheckoutPage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    skullnavbar: makeNodeComponent("skullnavbar"),
    columns: makeNodeComponent("columns"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    link: makeNodeComponent("link"),
    textInput4: makeNodeComponent("textInput4"),
    textInput6: makeNodeComponent("textInput6"),
    textInput5: makeNodeComponent("textInput5"),
    checkbox: makeNodeComponent("checkbox"),
    textInput7: makeNodeComponent("textInput7"),
    textInput8: makeNodeComponent("textInput8"),
    textInput9: makeNodeComponent("textInput9"),
    textInput10: makeNodeComponent("textInput10"),
    textInput11: makeNodeComponent("textInput11"),
    checkbox2: makeNodeComponent("checkbox2"),
    productbagitems: makeNodeComponent("productbagitems"),
    // Metadata about props expected for PlasmicCheckoutPage
    internalVariantProps: PlasmicCheckoutPage__VariantProps,
    internalArgProps: PlasmicCheckoutPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCheckoutPage;
/* prettier-ignore-end */
