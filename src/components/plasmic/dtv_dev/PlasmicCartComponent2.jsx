// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: YwLEwoKK2_A_
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import CartComponent from "../../CartComponent"; // plasmic-import: EBaTriZvUq0t/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Button from "../../Button"; // plasmic-import: Humveg51WdE0/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicCartComponent2.module.css"; // plasmic-import: YwLEwoKK2_A_/css

createPlasmicElementProxy;

export const PlasmicCartComponent2__VariantProps = new Array();

export const PlasmicCartComponent2__ArgProps = new Array(
  "cart",
  "cartElement",
  "cart2",
  "onCartChange"
);

const $$ = {};

function PlasmicCartComponent2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          cart: false,
          cartElement: 0
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cart2",
        type: "writable",
        variableType: "number",
        valueProp: "cart2",
        onChangeProp: "onCartChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <CartComponent
          data-plasmic-name={"cartComponent"}
          data-plasmic-override={overrides.cartComponent}
          className={classNames("__wab_instance", sty.cartComponent)}
        />

        <a
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          href={undefined}
          target={undefined}
        >
          <AntdPopover
            data-plasmic-name={"popover"}
            data-plasmic-override={overrides.popover}
            arrow={true}
            className={classNames("__wab_instance", sty.popover)}
            content={null}
            contentText={`Cart details Are : $props${
              "Cart Details Are :" + $props.cartElement
            }`}
            defaultOpen={false}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens
            )}
            mouseEnterDelay={0}
            mouseLeaveDelay={0}
            onOpenChange={generateStateOnChangeProp($state, [
              "popover",
              "open"
            ])}
            open={generateStateValueProp($state, ["popover", "open"])}
            popoverScopeClassName={sty["popover__popover"]}
            title={null}
          >
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              onClick={async event => {
                const $steps = {};
                $steps["updatePopoverOpen2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["cart2"]
                        },
                        operation: 0
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePopoverOpen2"] != null &&
                  typeof $steps["updatePopoverOpen2"] === "object" &&
                  typeof $steps["updatePopoverOpen2"].then === "function"
                ) {
                  $steps["updatePopoverOpen2"] = await $steps[
                    "updatePopoverOpen2"
                  ];
                }
              }}
            >
              {"view Cart"}
            </Button>
          </AntdPopover>
        </a>
      </div>
      {(() => {
        try {
          return $props.cart;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return "Cart Details Are : " + $props.cartElement;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      ) : null}
    </section>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "cartComponent",
    "link",
    "popover",
    "button",
    "text"
  ],

  freeBox: ["freeBox", "cartComponent", "link", "popover", "button"],
  cartComponent: ["cartComponent"],
  link: ["link", "popover", "button"],
  popover: ["popover", "button"],
  button: ["button"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCartComponent2__ArgProps,
          internalVariantPropNames: PlasmicCartComponent2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCartComponent2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCartComponent2";
  } else {
    func.displayName = `PlasmicCartComponent2.${nodeName}`;
  }
  return func;
}

export const PlasmicCartComponent2 = Object.assign(
  // Top-level PlasmicCartComponent2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    cartComponent: makeNodeComponent("cartComponent"),
    link: makeNodeComponent("link"),
    popover: makeNodeComponent("popover"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicCartComponent2
    internalVariantProps: PlasmicCartComponent2__VariantProps,
    internalArgProps: PlasmicCartComponent2__ArgProps
  }
);

export default PlasmicCartComponent2;
/* prettier-ignore-end */
