// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: E54ySe9kb_ns
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: Humveg51WdE0/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicSubscriptionSucces.module.css"; // plasmic-import: E54ySe9kb_ns/css
import geekCoderRa4Zbb2A3F7Ykc6Jjpg5Wdsp0L6Uah from "./images/geekCoderRa4Zbb2A3F7Ykc6Jjpg.jpg"; // plasmic-import: 5Wdsp0l_6uah/picture

createPlasmicElementProxy;

export const PlasmicSubscriptionSucces__VariantProps = new Array();

export const PlasmicSubscriptionSucces__ArgProps = new Array("children");

const $$ = {};

function PlasmicSubscriptionSucces__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"609px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"955px"}
        loading={"lazy"}
        src={{
          src: geekCoderRa4Zbb2A3F7Ykc6Jjpg5Wdsp0L6Uah,
          fullWidth: 1920,
          fullHeight: 1080,
          aspectRatio: undefined
        }}
      />

      <h1
        data-plasmic-name={"h1"}
        data-plasmic-override={overrides.h1}
        className={classNames(projectcss.all, projectcss.h1, sty.h1)}
      >
        {renderPlasmicSlot({
          defaultContents: "Your subscription is upgraded, john.",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </h1>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__z2G0V
        )}
      >
        {
          "you will access to your free season  subscription through May 30, 2024. I t will renew at the full amount on september XX, 2024."
        }
      </div>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        onClick={async event => {
          const $steps = {};
          $steps["goToBbSettings"] = true
            ? (() => {
                const actionArgs = { destination: `/new-page-5` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    location.assign(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToBbSettings"] != null &&
            typeof $steps["goToBbSettings"] === "object" &&
            typeof $steps["goToBbSettings"].then === "function"
          ) {
            $steps["goToBbSettings"] = await $steps["goToBbSettings"];
          }
        }}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__irdq3
          )}
        >
          {"GO TO SETTINGS"}
        </div>
      </Button>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "h1", "button"],
  img: ["img"],
  h1: ["h1"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSubscriptionSucces__ArgProps,
          internalVariantPropNames: PlasmicSubscriptionSucces__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSubscriptionSucces__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubscriptionSucces";
  } else {
    func.displayName = `PlasmicSubscriptionSucces.${nodeName}`;
  }
  return func;
}

export const PlasmicSubscriptionSucces = Object.assign(
  // Top-level PlasmicSubscriptionSucces renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicSubscriptionSucces
    internalVariantProps: PlasmicSubscriptionSucces__VariantProps,
    internalArgProps: PlasmicSubscriptionSucces__ArgProps
  }
);

export default PlasmicSubscriptionSucces;
/* prettier-ignore-end */
