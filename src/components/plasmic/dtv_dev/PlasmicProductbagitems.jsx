// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: XKs8X1cbiEqZ
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: Humveg51WdE0/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicProductbagitems.module.css"; // plasmic-import: XKs8X1cbiEqZ/css
import smallhpswebpMCwfsACvTtVq from "./images/smallhpswebp.webp"; // plasmic-import: mCwfsACvTtVq/picture

createPlasmicElementProxy;

export const PlasmicProductbagitems__VariantProps = new Array();

export const PlasmicProductbagitems__ArgProps = new Array();

const $$ = {};

function PlasmicProductbagitems__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__ci9Bd)}>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"150px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"150px"}
            loading={"lazy"}
            src={{
              src: smallhpswebpMCwfsACvTtVq,
              fullWidth: 1080,
              fullHeight: 1080,
              aspectRatio: undefined
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.column__db42)}>
          <div className={classNames(projectcss.all, sty.freeBox__gj1UZ)}>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__spwbA
              )}
            >
              {"Crusher\u00ae Evo"}
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__a6SIy
              )}
            >
              {"True Black"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tQJkc)}>
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__iNxAg
                )}
                href={"https://www.plasmic.app/"}
              >
                {"+"}
              </a>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pe4Pj
                )}
              >
                {"2"}
              </div>
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__aXaxT
                )}
                href={"https://www.plasmic.app/"}
              >
                {"-"}
              </a>
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__qCvKu)}>
          <div className={classNames(projectcss.all, sty.freeBox__zk7PK)}>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__giRxY
              )}
            >
              {"$339.98"}
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iXbWp
              )}
            >
              {"Remove"}
            </div>
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__mtwAj)}>
        <h1
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1__fv7DQ
          )}
        >
          {"Subtotal"}
        </h1>
        <h1
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1__cbdws
          )}
        >
          {"$339.98"}
        </h1>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__awcqz)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__tzEJe
          )}
        >
          {"Taxes and shipping calculated at checkout"}
        </div>
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          onClick={async event => {
            const $steps = {};
            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return event.target.parentElement;
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ttZ9P
            )}
          >
            {"CHECKOUT"}
          </div>
        </Button>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "img", "button"],
  columns: ["columns", "img"],
  img: ["img"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductbagitems__ArgProps,
          internalVariantPropNames: PlasmicProductbagitems__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductbagitems__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductbagitems";
  } else {
    func.displayName = `PlasmicProductbagitems.${nodeName}`;
  }
  return func;
}

export const PlasmicProductbagitems = Object.assign(
  // Top-level PlasmicProductbagitems renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicProductbagitems
    internalVariantProps: PlasmicProductbagitems__VariantProps,
    internalArgProps: PlasmicProductbagitems__ArgProps
  }
);

export default PlasmicProductbagitems;
/* prettier-ignore-end */
