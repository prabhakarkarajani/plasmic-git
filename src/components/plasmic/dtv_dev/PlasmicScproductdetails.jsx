// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMuK5QvKwWGrkw9DYJKXqS
// Component: g4vpe2hpy5p9
import * as React from "react";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import Skullnavbar from "../../Skullnavbar"; // plasmic-import: 8kXWecR7xP8z/component
import Button from "../../Button"; // plasmic-import: Humveg51WdE0/component
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import SkullcandyFooter from "../../SkullcandyFooter"; // plasmic-import: vsk85xXTIg3V/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMuK5QvKwWGrkw9DYJKXqS/projectcss
import sty from "./PlasmicScproductdetails.module.css"; // plasmic-import: g4vpe2hpy5p9/css
import desktopPlpHeadphonesCrusherBassjpegFoN6R23OhYm from "./images/desktopPlpHeadphonesCrusherBassjpeg.jpg"; // plasmic-import: foN6r23-ohYm/picture
import desktopPlpHeadphonesLimitedEdition13429E2756E3349Ff91A3D1B0A8Db35A4JpegLC4RF1QxGnd4 from "./images/desktopPlpHeadphonesLimitedEdition13429E2756E3349Ff91A3D1B0A8Db35A4Jpeg.jpg"; // plasmic-import: lC4rF1qxGND4/picture
import headphonesHeaderColumnNewArrivalNoraTtCrusherjpegG55NJvMt9Oix from "./images/headphonesHeaderColumnNewArrivalNoraTtCrusherjpeg.jpg"; // plasmic-import: g55nJVMt9Oix/picture
import headphonesHeaderColumnNoiseCancelingMiaBrooksjpegJlabhdHlNHy from "./images/headphonesHeaderColumnNoiseCancelingMiaBrooksjpeg.jpg"; // plasmic-import: JlabhdHlN_hy/picture

createPlasmicElementProxy;

export const PlasmicScproductdetails__VariantProps = new Array();

export const PlasmicScproductdetails__ArgProps = new Array();

const $$ = {};

function PlasmicScproductdetails__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ih8P6)}>
            <Skullnavbar
              data-plasmic-name={"skullnavbar"}
              data-plasmic-override={overrides.skullnavbar}
              className={classNames("__wab_instance", sty.skullnavbar)}
            />

            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__uTSbb
              )}
            >
              {"HEADPHONES"}
            </h1>
            <div className={classNames(projectcss.all, sty.freeBox__pJ9)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__pxYk)}
                displayHeight={"100%"}
                displayMaxHeight={"262px"}
                displayMaxWidth={"350px"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: desktopPlpHeadphonesCrusherBassjpegFoN6R23OhYm,
                  fullWidth: 341,
                  fullHeight: 257,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___7CvIk)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: desktopPlpHeadphonesLimitedEdition13429E2756E3349Ff91A3D1B0A8Db35A4JpegLC4RF1QxGnd4,
                  fullWidth: 341,
                  fullHeight: 257,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__iKz20)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: headphonesHeaderColumnNewArrivalNoraTtCrusherjpegG55NJvMt9Oix,
                  fullWidth: 341,
                  fullHeight: 257,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__bIpdY)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: headphonesHeaderColumnNoiseCancelingMiaBrooksjpegJlabhdHlNHy,
                  fullWidth: 341,
                  fullHeight: 257,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__qlxsE)}>
              <Button
                className={classNames("__wab_instance", sty.button___5O0KJ)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0DLxi
                  )}
                >
                  {"Filters"}
                </div>
              </Button>
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__tldO6
                )}
                href={"https://www.plasmic.app/"}
              >
                {"On Ear"}
              </a>
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__aPl5T
                )}
                href={"https://www.plasmic.app/"}
              >
                {"Over Ear"}
              </a>
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__jb2O5
                )}
                href={"https://www.plasmic.app/"}
              >
                {"Some link text"}
              </a>
              <AntdDropdown
                data-plasmic-name={"dropdown"}
                data-plasmic-override={overrides.dropdown}
                className={classNames("__wab_instance", sty.dropdown)}
                dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
                menuItems={() => (
                  <React.Fragment>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__lz781
                      )}
                      key={"menu-item-1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y4Yhn
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                    <AntdMenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.menuItem__azxr
                      )}
                      key={"menu-item-2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yqZ9F
                        )}
                      >
                        {"Menu item"}
                      </div>
                    </AntdMenuItem>
                  </React.Fragment>
                )}
                menuItemsJson={[
                  { type: "item", value: "action1", label: "Action 1" },
                  { type: "item", value: "action2", label: "Action 2" }
                ]}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__dZ1Ry)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eR2Cw
                    )}
                  >
                    {"Sort By: Featured"}
                  </div>
                </AntdButton>
              </AntdDropdown>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__sTvFo)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [2];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <DataFetcher
                    data-plasmic-name={"httpRestApiFetcher"}
                    data-plasmic-override={overrides.httpRestApiFetcher}
                    className={classNames(
                      "__wab_instance",
                      sty.httpRestApiFetcher
                    )}
                    dataName={"fetchedData"}
                    errorDisplay={
                      <DataCtxReader__>
                        {$ctx => "Error fetching data"}
                      </DataCtxReader__>
                    }
                    errorName={"fetchError"}
                    headers={{
                      "Content-Type": "application/json",
                      Accept: "application/json"
                    }}
                    key={currentIndex}
                    loadingDisplay={
                      <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                    }
                    method={"GET"}
                    noLayout={false}
                    url={"http://localhost:3000/products"}
                  >
                    <DataCtxReader__>
                      {$ctx =>
                        (_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $ctx.fetchedData[0].image;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_1, __plasmic_idx_1) => {
                          const currentItem = __plasmic_item_1;
                          const currentIndex = __plasmic_idx_1;
                          return (
                            <div
                              data-plasmic-name={"columns"}
                              data-plasmic-override={overrides.columns}
                              className={classNames(
                                projectcss.all,
                                sty.columns
                              )}
                              key={currentIndex}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__mwB6A
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ifXyw
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__jmI6I
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__tZffg)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={"273px"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return $ctx.fetchedData[0].image;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      width={"273px"}
                                    />
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__fTeo
                                    )}
                                  >
                                    {"HESH\u00ae EVO"}
                                  </h1>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__msa88
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[0].name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__nPc9N
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[0].price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "You won't believe what happens next.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h1>
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return [2];
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_2, __plasmic_idx_2) => {
                                const currentItem = __plasmic_item_2;
                                const currentIndex = __plasmic_idx_2;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__kpNwu
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___8ADq
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__q8Nb4
                                        )}
                                      >
                                        <PlasmicImg__
                                          alt={""}
                                          className={classNames(sty.img__cBaDn)}
                                          displayHeight={"auto"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"auto"}
                                          height={"273px"}
                                          loading={"lazy"}
                                          src={(() => {
                                            try {
                                              return $ctx.fetchedData[1].image;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}
                                          width={"273px"}
                                        />
                                      </div>
                                      <h1
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h1,
                                          projectcss.__wab_text,
                                          sty.h1__lfhMk
                                        )}
                                      >
                                        {"RIFF\u00ae WIRELESS 2"}
                                      </h1>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__cEsD3
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $ctx.fetchedData[1].name;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                      <h1
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h1,
                                          projectcss.__wab_text,
                                          sty.h1__ayNU
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $ctx.fetchedData[1].price;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "You won't believe what happens next.";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </h1>
                                    </div>
                                  </div>
                                );
                              })}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__rDAgh
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__q5Wor
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___8LNtu
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img___6OexP)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={"273px"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return $ctx.fetchedData[2].image;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      width={"273px"}
                                    />
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__iiLj
                                    )}
                                  >
                                    {"Hesh@ANC"}
                                  </h1>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__jYWW
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[2].name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__aiC04
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[2].price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "You won't believe what happens next.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h1>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__aio7X
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___8OImv
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__svFsN
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__z5AKe)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return $ctx.fetchedData[3].image;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      width={"273px"}
                                    />
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__y6P6D
                                    )}
                                  >
                                    {"HESH\u00ae EVO"}
                                  </h1>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___6TwPd
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[3].name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__skyvG
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[3].price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "$ ";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h1>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__wfOsk
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___5SNf
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__pOvf5
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__be8ZK)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={"273px"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return $ctx.fetchedData[4].image;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      width={"273px"}
                                    />
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__nuSi
                                    )}
                                  >
                                    {"HESH\u00ae EVO"}
                                  </h1>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xCyeB
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[4].name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__z4Bf3
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[4].price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "You won't believe what happens next.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h1>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__kiUhh
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__btI8V
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__gtrqs
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__r4NcM)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={"273px"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return $ctx.fetchedData[5].image;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      width={"273px"}
                                    />
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1___8QyOt
                                    )}
                                  >
                                    {"Hesh@ANC"}
                                  </h1>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__h9T4R
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[5].name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__oC7T
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[5].price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "You won't believe what happens next.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h1>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__ae4QM
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__iBbV
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__gRs3H
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__g8C9T)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return $ctx.fetchedData[6].image;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      width={"273px"}
                                    />
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__wUIoR
                                    )}
                                  >
                                    {"RIFF\u00ae WIRELESS 2"}
                                  </h1>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fcwba
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[6].name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1___8Shr0
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[7].price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "You won't believe what happens next.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h1>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column___7OUgl
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__bUzP
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ulRU
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__g5Y6)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={"273px"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return $ctx.fetchedData[7].image;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      width={"273px"}
                                    />
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__u1Gi
                                    )}
                                  >
                                    {"RIFF\u00ae WIRELESS 2"}
                                  </h1>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__m9Hzl
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[7].name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__iROq1
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[8].price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "You won't believe what happens next.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h1>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__niBbz
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__wOprk
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__qVwu2
                                    )}
                                  >
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__mtqu6)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={"273px"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return $ctx.fetchedData[8].image;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      width={"273px"}
                                    />
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1__lxiy4
                                    )}
                                  >
                                    {"RIFF\u00ae WIRELESS 2"}
                                  </h1>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__p9Na
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[8].name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <h1
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h1,
                                      projectcss.__wab_text,
                                      sty.h1___0ZItV
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $ctx.fetchedData[8].price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "You won't believe what happens next.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h1>
                                </div>
                              </div>
                            </div>
                          );
                        })
                      }
                    </DataCtxReader__>
                  </DataFetcher>
                );
              })}
            </div>
            <SkullcandyFooter
              data-plasmic-name={"skullcandyFooter"}
              data-plasmic-override={overrides.skullcandyFooter}
              className={classNames("__wab_instance", sty.skullcandyFooter)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "skullnavbar",
    "dropdown",
    "httpRestApiFetcher",
    "columns",
    "skullcandyFooter"
  ],

  skullnavbar: ["skullnavbar"],
  dropdown: ["dropdown"],
  httpRestApiFetcher: ["httpRestApiFetcher", "columns"],
  columns: ["columns"],
  skullcandyFooter: ["skullcandyFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicScproductdetails__ArgProps,
          internalVariantPropNames: PlasmicScproductdetails__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScproductdetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScproductdetails";
  } else {
    func.displayName = `PlasmicScproductdetails.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"sMuK5QvKwWGrkw9DYJKXqS"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sMuK5QvKwWGrkw9DYJKXqS"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicScproductdetails = Object.assign(
  // Top-level PlasmicScproductdetails renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    skullnavbar: makeNodeComponent("skullnavbar"),
    dropdown: makeNodeComponent("dropdown"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    columns: makeNodeComponent("columns"),
    skullcandyFooter: makeNodeComponent("skullcandyFooter"),
    // Metadata about props expected for PlasmicScproductdetails
    internalVariantProps: PlasmicScproductdetails__VariantProps,
    internalArgProps: PlasmicScproductdetails__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicScproductdetails;
/* prettier-ignore-end */
